/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as AppRouteRouteImport } from "./routes/app/route";
import { Route as authRouteRouteImport } from "./routes/(auth)/route";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as AppIndexRouteImport } from "./routes/app/index";
import { Route as AppShowsRouteImport } from "./routes/app/shows";
import { Route as AppPlayerRouteImport } from "./routes/app/player";
import { Route as AppMoviesRouteImport } from "./routes/app/movies";
import { Route as AppLiveRouteImport } from "./routes/app/live";
import { Route as authSignupRouteImport } from "./routes/(auth)/signup";
import { Route as authLoginRouteImport } from "./routes/(auth)/login";
import { Route as AppShowsPlaylistIdSeriesIdRouteImport } from "./routes/app/shows/$playlistId.$seriesId";
import { Route as AppMoviesPlaylistIdMovieIdRouteImport } from "./routes/app/movies/$playlistId.$movieId";
import { Route as AppLivePlaylistIdChannelIdRouteImport } from "./routes/app/live/$playlistId.$channelId";

const AppRouteRoute = AppRouteRouteImport.update({
  id: "/app",
  path: "/app",
  getParentRoute: () => rootRouteImport,
} as any);
const authRouteRoute = authRouteRouteImport.update({
  id: "/(auth)",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const AppIndexRoute = AppIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AppRouteRoute,
} as any);
const AppShowsRoute = AppShowsRouteImport.update({
  id: "/shows",
  path: "/shows",
  getParentRoute: () => AppRouteRoute,
} as any);
const AppPlayerRoute = AppPlayerRouteImport.update({
  id: "/player",
  path: "/player",
  getParentRoute: () => AppRouteRoute,
} as any);
const AppMoviesRoute = AppMoviesRouteImport.update({
  id: "/movies",
  path: "/movies",
  getParentRoute: () => AppRouteRoute,
} as any);
const AppLiveRoute = AppLiveRouteImport.update({
  id: "/live",
  path: "/live",
  getParentRoute: () => AppRouteRoute,
} as any);
const authSignupRoute = authSignupRouteImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => authRouteRoute,
} as any);
const authLoginRoute = authLoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => authRouteRoute,
} as any);
const AppShowsPlaylistIdSeriesIdRoute =
  AppShowsPlaylistIdSeriesIdRouteImport.update({
    id: "/$playlistId/$seriesId",
    path: "/$playlistId/$seriesId",
    getParentRoute: () => AppShowsRoute,
  } as any);
const AppMoviesPlaylistIdMovieIdRoute =
  AppMoviesPlaylistIdMovieIdRouteImport.update({
    id: "/$playlistId/$movieId",
    path: "/$playlistId/$movieId",
    getParentRoute: () => AppMoviesRoute,
  } as any);
const AppLivePlaylistIdChannelIdRoute =
  AppLivePlaylistIdChannelIdRouteImport.update({
    id: "/$playlistId/$channelId",
    path: "/$playlistId/$channelId",
    getParentRoute: () => AppLiveRoute,
  } as any);

export interface FileRoutesByFullPath {
  "/": typeof authRouteRouteWithChildren;
  "/app": typeof AppRouteRouteWithChildren;
  "/login": typeof authLoginRoute;
  "/signup": typeof authSignupRoute;
  "/app/live": typeof AppLiveRouteWithChildren;
  "/app/movies": typeof AppMoviesRouteWithChildren;
  "/app/player": typeof AppPlayerRoute;
  "/app/shows": typeof AppShowsRouteWithChildren;
  "/app/": typeof AppIndexRoute;
  "/app/live/$playlistId/$channelId": typeof AppLivePlaylistIdChannelIdRoute;
  "/app/movies/$playlistId/$movieId": typeof AppMoviesPlaylistIdMovieIdRoute;
  "/app/shows/$playlistId/$seriesId": typeof AppShowsPlaylistIdSeriesIdRoute;
}
export interface FileRoutesByTo {
  "/": typeof authRouteRouteWithChildren;
  "/login": typeof authLoginRoute;
  "/signup": typeof authSignupRoute;
  "/app/live": typeof AppLiveRouteWithChildren;
  "/app/movies": typeof AppMoviesRouteWithChildren;
  "/app/player": typeof AppPlayerRoute;
  "/app/shows": typeof AppShowsRouteWithChildren;
  "/app": typeof AppIndexRoute;
  "/app/live/$playlistId/$channelId": typeof AppLivePlaylistIdChannelIdRoute;
  "/app/movies/$playlistId/$movieId": typeof AppMoviesPlaylistIdMovieIdRoute;
  "/app/shows/$playlistId/$seriesId": typeof AppShowsPlaylistIdSeriesIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/(auth)": typeof authRouteRouteWithChildren;
  "/app": typeof AppRouteRouteWithChildren;
  "/(auth)/login": typeof authLoginRoute;
  "/(auth)/signup": typeof authSignupRoute;
  "/app/live": typeof AppLiveRouteWithChildren;
  "/app/movies": typeof AppMoviesRouteWithChildren;
  "/app/player": typeof AppPlayerRoute;
  "/app/shows": typeof AppShowsRouteWithChildren;
  "/app/": typeof AppIndexRoute;
  "/app/live/$playlistId/$channelId": typeof AppLivePlaylistIdChannelIdRoute;
  "/app/movies/$playlistId/$movieId": typeof AppMoviesPlaylistIdMovieIdRoute;
  "/app/shows/$playlistId/$seriesId": typeof AppShowsPlaylistIdSeriesIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/app"
    | "/login"
    | "/signup"
    | "/app/live"
    | "/app/movies"
    | "/app/player"
    | "/app/shows"
    | "/app/"
    | "/app/live/$playlistId/$channelId"
    | "/app/movies/$playlistId/$movieId"
    | "/app/shows/$playlistId/$seriesId";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/login"
    | "/signup"
    | "/app/live"
    | "/app/movies"
    | "/app/player"
    | "/app/shows"
    | "/app"
    | "/app/live/$playlistId/$channelId"
    | "/app/movies/$playlistId/$movieId"
    | "/app/shows/$playlistId/$seriesId";
  id:
    | "__root__"
    | "/"
    | "/(auth)"
    | "/app"
    | "/(auth)/login"
    | "/(auth)/signup"
    | "/app/live"
    | "/app/movies"
    | "/app/player"
    | "/app/shows"
    | "/app/"
    | "/app/live/$playlistId/$channelId"
    | "/app/movies/$playlistId/$movieId"
    | "/app/shows/$playlistId/$seriesId";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  authRouteRoute: typeof authRouteRouteWithChildren;
  AppRouteRoute: typeof AppRouteRouteWithChildren;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/app": {
      id: "/app";
      path: "/app";
      fullPath: "/app";
      preLoaderRoute: typeof AppRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(auth)": {
      id: "/(auth)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/app/": {
      id: "/app/";
      path: "/";
      fullPath: "/app/";
      preLoaderRoute: typeof AppIndexRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    "/app/shows": {
      id: "/app/shows";
      path: "/shows";
      fullPath: "/app/shows";
      preLoaderRoute: typeof AppShowsRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    "/app/player": {
      id: "/app/player";
      path: "/player";
      fullPath: "/app/player";
      preLoaderRoute: typeof AppPlayerRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    "/app/movies": {
      id: "/app/movies";
      path: "/movies";
      fullPath: "/app/movies";
      preLoaderRoute: typeof AppMoviesRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    "/app/live": {
      id: "/app/live";
      path: "/live";
      fullPath: "/app/live";
      preLoaderRoute: typeof AppLiveRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    "/(auth)/signup": {
      id: "/(auth)/signup";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof authSignupRouteImport;
      parentRoute: typeof authRouteRoute;
    };
    "/(auth)/login": {
      id: "/(auth)/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof authLoginRouteImport;
      parentRoute: typeof authRouteRoute;
    };
    "/app/shows/$playlistId/$seriesId": {
      id: "/app/shows/$playlistId/$seriesId";
      path: "/$playlistId/$seriesId";
      fullPath: "/app/shows/$playlistId/$seriesId";
      preLoaderRoute: typeof AppShowsPlaylistIdSeriesIdRouteImport;
      parentRoute: typeof AppShowsRoute;
    };
    "/app/movies/$playlistId/$movieId": {
      id: "/app/movies/$playlistId/$movieId";
      path: "/$playlistId/$movieId";
      fullPath: "/app/movies/$playlistId/$movieId";
      preLoaderRoute: typeof AppMoviesPlaylistIdMovieIdRouteImport;
      parentRoute: typeof AppMoviesRoute;
    };
    "/app/live/$playlistId/$channelId": {
      id: "/app/live/$playlistId/$channelId";
      path: "/$playlistId/$channelId";
      fullPath: "/app/live/$playlistId/$channelId";
      preLoaderRoute: typeof AppLivePlaylistIdChannelIdRouteImport;
      parentRoute: typeof AppLiveRoute;
    };
  }
}

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute;
  authSignupRoute: typeof authSignupRoute;
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
};

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
);

interface AppLiveRouteChildren {
  AppLivePlaylistIdChannelIdRoute: typeof AppLivePlaylistIdChannelIdRoute;
}

const AppLiveRouteChildren: AppLiveRouteChildren = {
  AppLivePlaylistIdChannelIdRoute: AppLivePlaylistIdChannelIdRoute,
};

const AppLiveRouteWithChildren =
  AppLiveRoute._addFileChildren(AppLiveRouteChildren);

interface AppMoviesRouteChildren {
  AppMoviesPlaylistIdMovieIdRoute: typeof AppMoviesPlaylistIdMovieIdRoute;
}

const AppMoviesRouteChildren: AppMoviesRouteChildren = {
  AppMoviesPlaylistIdMovieIdRoute: AppMoviesPlaylistIdMovieIdRoute,
};

const AppMoviesRouteWithChildren = AppMoviesRoute._addFileChildren(
  AppMoviesRouteChildren,
);

interface AppShowsRouteChildren {
  AppShowsPlaylistIdSeriesIdRoute: typeof AppShowsPlaylistIdSeriesIdRoute;
}

const AppShowsRouteChildren: AppShowsRouteChildren = {
  AppShowsPlaylistIdSeriesIdRoute: AppShowsPlaylistIdSeriesIdRoute,
};

const AppShowsRouteWithChildren = AppShowsRoute._addFileChildren(
  AppShowsRouteChildren,
);

interface AppRouteRouteChildren {
  AppLiveRoute: typeof AppLiveRouteWithChildren;
  AppMoviesRoute: typeof AppMoviesRouteWithChildren;
  AppPlayerRoute: typeof AppPlayerRoute;
  AppShowsRoute: typeof AppShowsRouteWithChildren;
  AppIndexRoute: typeof AppIndexRoute;
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppLiveRoute: AppLiveRouteWithChildren,
  AppMoviesRoute: AppMoviesRouteWithChildren,
  AppPlayerRoute: AppPlayerRoute,
  AppShowsRoute: AppShowsRouteWithChildren,
  AppIndexRoute: AppIndexRoute,
};

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  AppRouteRoute: AppRouteRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
