"use client";

import React from "react";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { useCreatePlaylist } from "~/hooks/usePlaylist";

type Mode = "xtream" | "m3u";

interface PlaylistEmptyStateProps {
  defaultServers?: string[];
  defaultUsername?: string;
  defaultPassword?: string;
}

export function PlaylistEmptyState({
  defaultServers = ["http://89.37.117.6:2095", "http://nordicstream.xyz:2095"],
  defaultUsername = "ngArk2Up",
  defaultPassword = "aSh3J7M",
}: PlaylistEmptyStateProps) {
  const [mode, setMode] = React.useState<Mode>("xtream");

  // Xtream state
  const [name, setName] = React.useState<string>("My Playlist");
  const [server, setServer] = React.useState<string>(defaultServers[0] ?? "");
  const [username, setUsername] = React.useState<string>(defaultUsername);
  const [password, setPassword] = React.useState<string>(defaultPassword);

  // M3U state
  const [m3uUrl, setM3uUrl] = React.useState<string>("");

  const createPlaylist = useCreatePlaylist();

  function extractXtreamFromM3U(
    urlText: string,
  ): { server: string; username: string; password: string } | null {
    try {
      const parsed = new URL(urlText);
      const usernameParam = parsed.searchParams.get("username");
      const passwordParam = parsed.searchParams.get("password");
      if (!usernameParam || !passwordParam) return null;

      const origin = `${parsed.protocol}//${parsed.hostname}${parsed.port ? ":" + parsed.port : ""}`;
      return { server: origin, username: usernameParam, password: passwordParam };
    } catch {
      return null;
    }
  }

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (createPlaylist.isPending) return;

    try {
      let payload: { name: string; server: string; username: string; password: string };

      if (mode === "m3u") {
        const creds = extractXtreamFromM3U(m3uUrl.trim());
        if (!creds) {
          alert("Invalid M3U URL. It must include username and password query params.");
          return;
        }
        payload = { name: name || "My Playlist", ...creds };
      } else {
        if (!server || !username || !password) {
          alert("Please fill in server, username, and password.");
          return;
        }
        payload = { name: name || "My Playlist", server, username, password };
      }

      await createPlaylist.mutateAsync(payload);
      // Query invalidation happens in the hook, dashboard will refresh
    } catch (err) {
      console.error("Failed to create playlist", err);
      alert("Failed to create playlist. Please verify credentials or M3U URL.");
    }
  }

  function useDemoDefaults() {
    setServer(defaultServers[0] ?? "");
    setUsername(defaultUsername);
    setPassword(defaultPassword);
    if (!name) setName("Demo Playlist");
  }

  return (
    <div className="flex min-h-[70vh] items-center justify-center">
      <div className="w-full max-w-xl rounded-lg border p-6">
        <div className="mb-6 text-center">
          <h2 className="text-2xl font-semibold">Add your first playlist</h2>
          <p className="text-muted-foreground mt-1 text-sm">
            Use Xtream credentials or paste an M3U URL. We'll configure it for you.
          </p>
        </div>

        {/* Mode toggle */}
        <div className="mb-4 flex items-center justify-center gap-2">
          <Button
            type="button"
            variant={mode === "xtream" ? "default" : "secondary"}
            onClick={() => setMode("xtream")}
          >
            Xtream
          </Button>
          <Button
            type="button"
            variant={mode === "m3u" ? "default" : "secondary"}
            onClick={() => setMode("m3u")}
          >
            M3U URL
          </Button>
        </div>

        <form onSubmit={onSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">Playlist name</Label>
            <Input
              id="name"
              placeholder="My Playlist"
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
          </div>

          {mode === "xtream" ? (
            <>
              <div className="space-y-2">
                <Label htmlFor="server">Server</Label>
                <Input
                  id="server"
                  placeholder={defaultServers.join(", ")}
                  value={server}
                  onChange={(e) => setServer(e.target.value)}
                />
                <div className="flex gap-2">
                  {defaultServers.map((s) => (
                    <Button
                      key={s}
                      type="button"
                      variant="outline"
                      onClick={() => setServer(s)}
                    >
                      {s}
                    </Button>
                  ))}
                </div>
              </div>

              <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                <div className="space-y-2">
                  <Label htmlFor="username">Username</Label>
                  <Input
                    id="username"
                    placeholder="Username"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="password">Password</Label>
                  <Input
                    id="password"
                    placeholder="Password"
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                </div>
              </div>

              <div className="flex items-center gap-2">
                <Button type="button" variant="outline" onClick={useDemoDefaults}>
                  Use demo defaults
                </Button>
                <Button type="submit" disabled={createPlaylist.isPending}>
                  {createPlaylist.isPending ? "Creating..." : "Create playlist"}
                </Button>
              </div>
            </>
          ) : (
            <>
              <div className="space-y-2">
                <Label htmlFor="m3u">M3U URL</Label>
                <Input
                  id="m3u"
                  placeholder="http://host:port/get.php?username=USER&password=PASS&type=m3u"
                  value={m3uUrl}
                  onChange={(e) => setM3uUrl(e.target.value)}
                />
              </div>

              <div className="flex items-center gap-2">
                <Button type="submit" disabled={createPlaylist.isPending}>
                  {createPlaylist.isPending ? "Creating..." : "Create from M3U"}
                </Button>
              </div>
            </>
          )}
        </form>
      </div>
    </div>
  );
}

export default PlaylistEmptyState;
